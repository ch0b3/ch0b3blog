<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ちょうべえブログ</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on ちょうべえブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 11 Jun 2022 23:29:50 +0900</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ドメイン駆動設計 モデリング/実践ガイド 備忘録②</title>
      <link>http://localhost:1313/posts/ddd2/</link>
      <pubDate>Sat, 11 Jun 2022 23:29:50 +0900</pubDate>
      
      <guid>http://localhost:1313/posts/ddd2/</guid>
      <description>第二章　モデリングから実装まで ドメインモデリング ユースケース図 UMLで定義されている「ユーザーの要求に対してシステムの振る舞いを定義する図」
アクターが「〇〇を✕✕する」という形式で記述する。
この中でドメインモデリング図の作成スコープを決めていく。
なぜユースケース図をまず作成するのか。 ユースケースがわからないとどのようなモデルを作成すればいいかわからないから。
「作業者として自分のタスクを管理したい」のか「管理者として、複数管理者のタスクを管理したい」のか。
それによって、「タスク」のドメインモデルは違うものになる。
ドメインモデリング図作成スコープを決める目的 なぜ一度定義したユースケース図の中でドメインモデル図作成のスコープを決めるのか。
ドメインモデル図を作成していると色々な要素が浮かんできて、議論が広がってしまう。
それを範囲を狭めることで限られた時間内で成果を出せるようにするため。
ドメインモデル図 メソッドは書かず、オブジェクトの属性を書く ルール/制約を吹き出しに書く オブジェクト同士の関連を示す 多重度を定義 集約の範囲を定義 理解を促進するために、具体例などを書いても良い ルール/制約の記述方法 基本的には吹き出しに箇条書きでOK。
状態遷移もルール/制約の一つと捉えることができるので、状態遷移図を書くのも有効。
ドメインモデルの実装 ドメインモデル貧血症の問題点 不整合なデータをいくらでも作ることができてしまう 仕様を追いかけるのに、多くのクラスをコード参照から追う必要がある ドメイン知識を表現した実装 ドメイン知識をドメイン層に委譲する。
コンストラクタでインスタンス生成時の状態を定義する ルール/制約をドメイン層に記述する ユースケース層ではどのように実装するか(How)は隠蔽され、何をしたいか(What)だけ書く 常に正しいインスタンスしか存在させないドメイン層オブジェクト設計の基本方針 どのタイミングで永続化してもデータの整合性が保証されるようにする。
生成条件の強制
コンストラクタまたはファクトリーメソッドを経由して生成する ミューテーション条件の強制
セッターは外部公開しない 正しいミューテーションを起こすメソッドのみ外部公開する Q&amp;amp;A ユビキタス言語の管理方法 </description>
    </item>
    
    <item>
      <title>ドメイン駆動設計 モデリング/実践ガイド 備忘録①</title>
      <link>http://localhost:1313/posts/ddd1/</link>
      <pubDate>Wed, 08 Jun 2022 23:29:50 +0900</pubDate>
      
      <guid>http://localhost:1313/posts/ddd1/</guid>
      <description>第一章 DDD概要 良いモデリングを作る ドメインエキスパートと会話する 開発者の部分的な理解では不十分。
得られた知識をモデルに還元する 最初からモデルは完成しない、短いサイクルで徐々に改善する。
モデルの継続的改善 ユビキタス言語 モデル内の言葉を「会話、ドキュメント、コード」で統一する。
言葉を変換する際に発生する認識のズレを無くすために有効。
モデルを直接表現するコード モデルとコードの表現をできるだけ近づける。
モデルの表現を抽出できるように、UIやデータベースとのやり取りはできるだけ隔離したい。
戦術的設計パターンとモデリング エンティティやリポジトリなどの戦術的設計パターンだけを取り入れる。
-&amp;gt;軽量DDD
軽量DDDではモデリングをしない。
ただ、戦術的設計パターンとモデリングは同時に着手できる。
重要な考え方 課題ドリブン ルール &amp;lt; 課題
何を目的に導入するかをはっきりさせる。
小さく初めて、小さく失敗する １回のモデリング作業だけで終わらせることは不可能。
小さく試行錯誤のサイクルを繰り返すことで少しづつ成功体験が積まれていく。
DDDの向き・不向き DDDは複雑なドメインを解決するプロセス。
モデリングを中心としたアプローチが有効な場合は向いているが、必要ない場合は実装上のオーバーヘッドが大きいのでおすすめしない。</description>
    </item>
    
  </channel>
</rss>
